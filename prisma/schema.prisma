// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

// ================================
// AUTHENTICATION & USER MANAGEMENT
// ================================

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  fullName        String
  password        String?  // Nullable for OAuth users
  emailVerified   Boolean  @default(false)
  isActive        Boolean  @default(true)
  role            UserRole @default(CUSTOMER)
  
  // OAuth fields
  googleId        String?  @unique
  avatarUrl       String?
  provider        AuthProvider @default(TRADITIONAL)
  
  // Profile information
  phoneNumber     String?
  dateOfBirth     DateTime?
  gender          Gender?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?
  
  // Password reset
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // Email verification
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Two-factor authentication
  twoFactorSecret       String?
  twoFactorEnabled      Boolean @default(false)
  
  // Relationships
  shippingAddresses     ShippingAddress[]
  orders               Order[]
  cartItems            CartItem[]
  wishlistItems        WishlistItem[]
  reviews              Review[]
  ratings              Rating[]
  refreshTokens        RefreshToken[]
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}

// ================================
// SHIPPING MODULE
// ================================

model ShippingAddress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fullName    String
  phoneNumber String
  country     String
  state       String   // state/region
  city        String
  address     String
  postalCode  String
  
  isDefault   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  orders      Order[]
  
  @@map("shipping_addresses")
}

model ShippingOption {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String   @unique // "DHL Express", "FedEx International Priority"
  code              String   @unique // "DHL_EXPRESS", "FEDEX_PRIORITY"
  description       String?
  provider          ShippingProvider
  
  // Pricing
  baseCost          Float
  currency          String   @default("USD")
  
  // Delivery estimates
  estimatedDaysMin  Int
  estimatedDaysMax  Int
  
  // Availability
  isActive          Boolean  @default(true)
  availableCountries String[] // Array of country codes
  
  // Tracking
  trackingAvailable Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  orders            Order[]
  
  @@map("shipping_options")
}

// ================================
// CATEGORIES MODULE
// ================================

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display order
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  subcategories Subcategory[]
  products     Product[]
  
  @@map("categories")
}

model Subcategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  imageUrl    String?
  
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display order
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  products    Product[]
  
  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Collection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  
  // Collection period
  year        Int
  season      Season?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Dates
  startDate   DateTime?
  endDate     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  products    Product[]
  
  @@map("collections")
}

// ================================
// PRODUCT MODULE
// ================================

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String   @unique
  description   String
  shortDescription String?
  
  // Basic info
  sku           String   @unique
  barcode       String?
  
  // Pricing
  price         Float
  comparePrice  Float?   // Original price for discount display
  currency      String   @default("USD")
  
  // Stock
  stockQuantity Int      @default(0)
  lowStockThreshold Int  @default(10)
  trackInventory Boolean @default(true)
  
  // Discount
  discountPercentage Float?
  discountStartDate  DateTime?
  discountEndDate    DateTime?
  
  // Media
  images        String[] // Array of Cloudinary URLs
  featuredImage String?  // Main product image
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Organization
  categoryId      String     @db.ObjectId
  category        Category   @relation(fields: [categoryId], references: [id])
  subcategoryId   String?    @db.ObjectId
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  collectionId    String?    @db.ObjectId
  collection      Collection? @relation(fields: [collectionId], references: [id])
  gender          Gender
  
  // Product attributes
  colors          String[]   // Available colors
  sizes           Size[]     // Available sizes
  
  // Status
  isActive        Boolean    @default(true)
  isFeatured      Boolean    @default(false)
  isDigital       Boolean    @default(false)
  
  // Dimensions and weight
  weight          Float?
  dimensions      Json?      // {length, width, height}
  
  // Additional fields
  tags            String[]
  materials       String[]
  careInstructions String[]
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relationships
  variants        ProductVariant[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  reviews         Review[]
  ratings         Rating[]
  orderItems      OrderItem[]
  
  @@map("products")
}

model ProductVariant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Variant attributes
  color         String?
  size          Size?
  sku           String   @unique
  
  // Pricing (can override product price)
  price         Float?
  comparePrice  Float?
  
  // Stock
  stockQuantity Int      @default(0)
  
  // Media
  images        String[] // Variant-specific images
  
  // Status
  isActive      Boolean  @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  cartItems     CartItem[]
  orderItems    OrderItem[]
  
  @@unique([productId, color, size])
  @@map("product_variants")
}

// ================================
// CART MODULE
// ================================

model CartItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId     String?  @db.ObjectId
  variant       ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  quantity      Int      @default(1)
  
  // Selected options
  selectedColor String?
  selectedSize  Size?
  
  // Pricing at time of adding to cart
  unitPrice     Float
  totalPrice    Float
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// ================================
// WISHLIST MODULE
// ================================

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

// ================================
// REVIEWS & RATINGS MODULE
// ================================

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  title     String?
  content   String
  rating    Int      @default(5) // 1-5 stars
  
  // Review status
  isApproved Boolean @default(false)
  isHelpful  Int     @default(0) // Count of helpful votes
  
  // Verification
  isVerifiedPurchase Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("reviews")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int      @default(5) // 1-5 stars
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("ratings")
}

// ================================
// ORDER MODULE
// ================================

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String   @unique
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  
  // Order status
  status        OrderStatus @default(PENDING)
  
  // Shipping information
  shippingAddressId String?      @db.ObjectId
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingOptionId  String?      @db.ObjectId
  shippingOption    ShippingOption? @relation(fields: [shippingOptionId], references: [id])
  
  // Pricing
  subtotal      Float
  shippingCost  Float    @default(0)
  taxAmount     Float    @default(0)
  discountAmount Float   @default(0)
  totalAmount   Float
  currency      String   @default("USD")
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod?
  
  // Tracking
  trackingNumber String?
  
  // Delivery
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  
  // Notes
  customerNotes String?
  internalNotes String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  items         OrderItem[]
  payments      Payment[]
  
  @@map("orders")
}

model OrderItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String   @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id])
  variantId     String?  @db.ObjectId
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  
  // Product snapshot at time of order
  productName   String
  productImage  String?
  selectedColor String?
  selectedSize  Size?
  
  createdAt     DateTime @default(now())
  
  @@map("order_items")
}

// ================================
// PAYMENT MODULE
// ================================

model Payment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String   @db.ObjectId
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  paymentMethod     PaymentMethod
  paymentProvider   PaymentProvider
  
  amount            Float
  currency          String   @default("USD")
  
  // Payment status
  status            PaymentStatus @default(PENDING)
  
  // Provider-specific IDs
  stripePaymentId   String?
  paypalPaymentId   String?
  
  // Transaction details
  transactionId     String?
  gatewayResponse   Json?
  
  // Failure information
  failureReason     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("payments")
}

// ================================
// ADDITIONAL MODELS
// ================================

model Coupon {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  code              String   @unique
  description       String?
  
  // Discount details
  discountType      DiscountType
  discountValue     Float
  minimumOrderAmount Float?
  
  // Usage limits
  usageLimit        Int?
  usedCount         Int      @default(0)
  usageLimitPerUser Int?
  
  // Validity
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean  @default(true)
  
  // Applicable products/categories
  applicableProducts    String[] @db.ObjectId
  applicableCategories  String[] @db.ObjectId
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("coupons")
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("newsletter")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  CUSTOMER
}

enum AuthProvider {
  TRADITIONAL
  GOOGLE
}

enum Gender {
  MEN
  WOMEN
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Season {
  SPRING_SUMMER
  AUTUMN_WINTER
  YEAR_ROUND
}

enum ShippingProvider {
  DHL_EXPRESS
  FEDEX_PRIORITY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  GOOGLE_PAY
  APPLE_PAY
  BANK_TRANSFER
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  FLUTTERWAVE
  RAZORPAY
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}